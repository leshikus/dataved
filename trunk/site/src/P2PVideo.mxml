<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="480" height="170"
	creationComplete="onCreationComplete(event)" >
	
	<fx:Script>
		<![CDATA[
			import flash.events.StatusEvent;
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.VideoDisplay;
			
			///////////////////////////////////////////////////
			// DECLARATIONS
			///////////////////////////////////////////////////
			
			// Stratus connect info
			private const SERVER:String = "rtmfp://p2p.rtmfp.net/";
			private const DEVKEY:String = "6aaebfb9835d7450a37814e4-f335eb8d3105";
			// Aplication constants
			private const MAX_USER_PER_TALK:Number = 3;
			private const SPEAK_LENGTH:int = 15000;
			private const POUSE_LENGTH:int = 1500;
			private const DISPLAY_WIDTH:Number = 115;
			private const DISPLAY_HEIGHT:Number = 120;
			
			// Used to connect to the Stratus service
			private var _netConnection:NetConnection;
			
			// Our GroupSpec
			private var _groupSpecifier:GroupSpecifier;
			private const _groupName:String = "dataved_group";
			
			// We need an outgoing and incoming stream
			private var _outgoingStream:CustomNetStream;
			private var _incomingStream:CustomNetStream;
			private var _publishedStream:CustomNetStream;
			private var _timerDelay:Timer;
			private var _timerPouse:Timer;
			private var _mic:Microphone;
			private var _camera:Camera;
			private var _startTime:Number = 0;
			private var _responseID:String;
			private var _incomingStreams:ArrayCollection;
			
			// We'll need a NetGroup
			private var _netGroup:NetGroup;
			
			// Used to store our P2P Peer ID
			[Bindable]
			private var _nearID:String;

			// We'll track if the NetConnection is connected
			[Bindable]
			private var _netConnectionConnected:Boolean;
			
			// Used to store our P2P GroupSpec
			[Bindable]
			private var _groupSpec:String;			

			private var _beep : Beep = new Beep();

			///////////////////////////////////////////////////
			// METHODS/HANDLERS
			///////////////////////////////////////////////////
			
			
			// On creation complete we'll connect to the stratus service
			protected function onCreationComplete( event:FlexEvent ):void
			{
				_initNetConnection();
			}			
			

			// We'll listen for netconnection, netstream, and NetGroup status and deal with it appropriately
			protected function onNetStatus( event:NetStatusEvent ):void
			{
				// Let's output to the UI console
				switch( event.info.code )
				{
					case "NetConnection.Connect.Success":
					{
						// We're connected...set the flag
						_netConnectionConnected = true;
						
						// We've connected to stratus, let's cache our ID
						_nearID = event.target.nearID;
						
						// Let's create a Group to use with NetStream and NetGroup
						_createGroupSpec();
						joinNetGroup();
						break;
					}
					case "NetConnection.Connect.Failed":
					{
						Alert.show("Не могу подключится к сервису .\n" +
							"Возможно проблема в настройкак firewall.", "Ошибка соединения" );
						break;
					}
					case "NetConnection.Connect.Closed":
					case "NetConnection.Connect.Rejected":
					case "NetConnection.Connect.AppShutdown":
					case "NetConnection.Connect.InvalidApp":
					{
						
						if( _netGroup )
						{
							clearNetGroup();
						}
						
						// clear references
						if (_outgoingStream)
						{
							_outgoingStream.close();
						}
						_outgoingStream = null;
						clearIncomingStreams();		
						
						
						// reset flags
						_netConnectionConnected = false;
						
						break;
					}
					case "NetStream.Play.Start":
					case "NetStream.Connect.Success":
					case "NetStream.Connect.Rejected":
					case "NetStream.Connect.Failed":
					case "NetStream.MulticastStream.Reset":
					case "NetStream.Buffer.Full":
					default:
					{
						break;	
					}
					// NetGroup Connection Events fire from NetConnection
					case "NetGroup.Connect.Success":
					{
						// Publish local video and audio
						_attachLocalVideoAndAudio();
						break;
					}		
					case "NetGroup.Connect.Rejected":
					case "NetGroup.Connect.Failed":
					{
						// let's clear the NetGroup ref and listener
						clearNetGroup();
						break;
					}																				
				}
			}	
			
			// handles NetGroup NetStatus events
			protected function onNetGroupStatus( event:NetStatusEvent ):void
			{
				// Let's output to the UI console
				switch(event.info.code)
				{									
					case "NetStream.Publish.Start":
					case "NetStream.Play.Start":
					case "NetStream.Play.Failed":
					case "NetGroup.Posting.Notify": 
					case "NetGroup.LocalCoverage.Notify":
					{
						break;
					}																		
					case "NetGroup.Neighbor.Connect":
					{
						// We have to convert the Stratus ID to a Group ID to compare it to the Group ID of the neighbor
						if( event.info.neighbor != _netGroup.convertPeerIDToGroupAddress(_nearID))
						{
							_attachPeerVideoAndAudio(event.info.neighbor);
						}
						break;
					}
					case "NetGroup.Neighbor.Disconnect":
					{					
						if(_netGroup.neighborCount == 0)
						{
							_outgoingStream.Published = false;
							_timerPouse.stop();
							videoDisplayIn.visible = false;
							if (_publishedStream)
							{
								try
								{
									publish_gr.removeElement(_publishedStream.VideoDisplay);
								}
								catch(errObject:Error) {
								}
								_publishedStream.close();
								_publishedStream = null;
							}	
						}
						_detachPeerVideoAndAudio(event.info.neighbor);
						break;
					}
					case "NetGroup.SendTo.Notify": // event.info.message, event.info.from, event.info.fromLocal
					{
						//Alert.show(event.info.message, "NetGroup.SendTo.Notify");
						_receiveMessage(event.info.message);
						break;
					}
					case "NetGroup.MulticastStream.PublishNotify": // event.info.name
					{
						_sendPublishNotify();
						break;
					}
					case "NetGroup.MulticastStream.UnpublishNotify": // event.info.name
					{
						//Alert.show(event.info.name, "NetGroup.MulticastStream.UnpublishNotify");
					}
					case "NetGroup.Replication.Fetch.SendNotify": // event.info.index
					case "NetGroup.Replication.Fetch.Failed": // event.info.index
					case "NetGroup.Replication.Fetch.Result": // event.info.index, event.info.object
					case "NetGroup.Replication.Request": // event.info.index, event.info.requestID	
					default:
					{
						break;
					}
				}									
			}

			// For outbound stream
			protected function startOutgoingStream():void
			{			
				// We create a stream in our net connection for P2P outgoing
				_outgoingStream = new CustomNetStream( _netConnection, _groupSpec );	
				// We add a net status listener to the NetStream
				_outgoingStream.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				_outgoingStream.NeighborID = _netGroup.convertPeerIDToGroupAddress( _nearID );
			}

			// For inbound stream
			protected function startIncomingStream(neighborID:String):CustomNetStream
			{					
				// Create an incoming stream with the GroupSpec
				var incomingStream:CustomNetStream = new CustomNetStream( _netConnection, _groupSpec );
				incomingStream.VideoDisplay = new mx.controls.VideoDisplay();
				var transform:SoundTransform = new SoundTransform(0, 0);
				transform.volume = 0;
				incomingStream.soundTransform = transform;
				if( neighborID != _netGroup.convertPeerIDToGroupAddress( _nearID ))
				{
					var _video:flash.media.Video;
					_video = new Video();
					_video.width = DISPLAY_WIDTH;
					_video.height = DISPLAY_HEIGHT;
					_video.attachNetStream(incomingStream);
					incomingStream.VideoDisplay.addChild(_video);
					incomingStream.NeighborID = neighborID;

					// Add listener to handel async errors
					incomingStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
					
					_incomingStreams.addItem(incomingStream);
				}
				return incomingStream;
			}

			// For NetGroup
			protected function joinNetGroup():void
			{
				// Creating a NetGroup instance
				_netGroup = new NetGroup( _netConnection, _groupSpec );
				
				// Adding a net status listener
				_netGroup.addEventListener( NetStatusEvent.NET_STATUS, onNetGroupStatus );
			}
			
			protected function clearNetGroup():void
			{
				_netGroup.close();
				_netGroup.removeEventListener( NetStatusEvent.NET_STATUS, onNetGroupStatus );
				_netGroup = null;
			}
				
			protected function clearIncomingStreams():void
			{
				if (_incomingStreams != null)
				{
					var incomingStream:CustomNetStream;
					for (var i:int = 0; i < _incomingStreams.length; i++ )
					{
						incomingStream = _incomingStreams.getItemAt(i) as CustomNetStream;
						incomingStream.close();
						incomingStream = null;
					}
					_incomingStreams.removeAll();
					_incomingStreams = null;
				}
			}
			
			protected function onSetupClick(event:MouseEvent): void
			{
				Security.showSettings();
			}
			private function _initNetConnection():void
			{
				_netConnection = new NetConnection();
				
				// Listen for status info
				_netConnection.addEventListener (NetStatusEvent.NET_STATUS, onNetStatus );
				
				// When we connect we are connecting to stratus using our unique URI
				_netConnection.connect( SERVER + DEVKEY );

				_incomingStreams = new ArrayCollection();
			}

			private function _createGroupSpec():void
			{
				// Let's create a GroupSpecifier
				_groupSpecifier = new GroupSpecifier( _groupName );
				_groupSpecifier.multicastEnabled = true;
				_groupSpecifier.objectReplicationEnabled = true;
				_groupSpecifier.postingEnabled = true;
				_groupSpecifier.routingEnabled = true;
				// By enabling the server channel Stratus can help clients find each other.
				_groupSpecifier.serverChannelEnabled = true;
				_groupSpec = _groupSpecifier.groupspecWithoutAuthorizations();				
			}
			
			private function _attachLocalVideoAndAudio():void
			{				
				// Let's get our camera and microphone
				_mic = Microphone.getMicrophone();

				if(_mic == null)
				{
					Alert.show("Микрофон не подключен или не доступен. Проверьте микрофон", "Подключите микрофон", Alert.CANCEL);
					return;
				}
				startOutgoingStream();
				
				_mic.setUseEchoSuppression(true);
				_mic.setSilenceLevel(5, POUSE_LENGTH);
				_mic.addEventListener(StatusEvent.STATUS, statusHandler);
				_mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
				
				// Let's attach the mic to the outgoing stream
				_outgoingStream.attachAudio(_mic);
				
				_timerDelay = new Timer(POUSE_LENGTH);
				//_timerDelay.addEventListener(TimerEvent.TIMER, delayTimerHandler);
				_timerPouse = new Timer(POUSE_LENGTH);
				_timerPouse.addEventListener(TimerEvent.TIMER, pouseTimerHandler);
				
				_camera = Camera.getCamera();
				if(_camera == null)
				{
					Alert.show('Для веб конференции желательно подключить камеру.','Подключите камеру');
				}
				else
				{
					// Let's monitor the video locally
					_outgoingStream.VideoDisplay = videoDisplayOut;
					_outgoingStream.VideoDisplay.attachCamera(_camera);
					_outgoingStream.VideoDisplay.visible = true;
					_outgoingStream.attachCamera(_camera);
				}
				_outgoingStream.NeighborID = _netGroup.convertPeerIDToGroupAddress( _nearID );
				_outgoingStream.publish(_netGroup.convertPeerIDToGroupAddress( _nearID ));
			}
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void 
			{
			}
			
			// check microphone status
			private function statusHandler(event:StatusEvent):void 
			{
				if (event.code == "Microphone.Muted")
				{
					Alert.show("Микрофон не подключен или не доступен. Проверьте микрофон", "Подключите микрофон", Alert.CANCEL);
					return;
				}

			}

			/**
			 *  Hendler send request to publish stream
			 *  that microphone of current user is active.
			 *  or 
			 */
			private function micActivityHandler(event:ActivityEvent):void 
			{
				if (event.activating)
				{
					if (!_outgoingStream.Published) //_netGroup.neighborCount > 0 &&   
					{
						_sendRequest(_netGroup.convertPeerIDToGroupAddress(_nearID));
					}
					/*else if (_timerDelay.running)
					{
						_timerDelay.stop();	
					}*/
				}
				/*else if (_outgoingStream.Published && !_timerDelay.running)
				{
					_timerDelay.start();
				}*/
			}

			/**
			 *  This handler send signal and swicth publish stream 
			 *  from himself to another new published stream.
			 */
			private function pouseTimerHandler(event:TimerEvent):void
			{   
				if ( _netGroup.neighborCount > 0 && _outgoingStream.Published && (getTimer() - _startTime > SPEAK_LENGTH) && _responseID )
				{
					_timerPouse.stop();
					_switchPublishStream();
					//_timerPouse.start();
				}
			}
			
			private function delayTimerHandler(event:TimerEvent):void
			{
				if (_outgoingStream.Published && _responseID)
				{
					_timerDelay.stop();	
					_switchPublishStream();
				}
			}
			
			// attached neighbor and play video stream
			private function _attachPeerVideoAndAudio(neighborID:String):void
			{
				// Create the incoming video from the stream
				startIncomingStream(neighborID);
				_displayPeerVideoAndAudio();
			}		
			
			private function _displayPeerVideoAndAudio():void
			{
				if (_incomingStreams != null)
				{
					var incomingStream:CustomNetStream;
					for (var i:int = 0; i < _incomingStreams.length; i++ )
					{
						incomingStream = _incomingStreams.getItemAt(i) as CustomNetStream;
						if (incomingStream != null && i < MAX_USER_PER_TALK - 1)
						{
							incomingStream.VideoDisplay.visible = true;
							try
							{
								neighbor_gr.getElementIndex(incomingStream.VideoDisplay);
								continue;
							}
							catch (errorObj:Error)
							{									
								var transform:SoundTransform = new SoundTransform(0, 0);
								transform.volume = 0;
								incomingStream.soundTransform = transform;
								neighbor_gr.addElement(incomingStream.VideoDisplay);
							}
							incomingStream.play(incomingStream.NeighborID);
						}
					}
				}
			}


			/**
			 * Display publish stream.
			 * @streamID - id of published stream
			 */
			private function _displayPublishVideoAndAudio(streamID:String):void
			{
				var isDisplayed:Boolean = false;
				var incomingStream:CustomNetStream
				if (_publishedStream)
				{
					try
					{
						publish_gr.removeElement(_publishedStream.VideoDisplay);
						isDisplayed = true;
					}
					catch(errObject:Error) {
					}
					_publishedStream.close();
					_publishedStream = null;
				}	
				var _video:flash.media.Video;
				if (_outgoingStream.NeighborID != streamID)
				{
					for (var i:int = 0; i < _incomingStreams.length; i++ )
					{
						incomingStream = _incomingStreams.getItemAt(i) as CustomNetStream;
						if (incomingStream != null && incomingStream.NeighborID == streamID)
						{
							if (incomingStream.VideoDisplay.visible)
							{
								try
								{
									neighbor_gr.removeElement(incomingStream.VideoDisplay);
									incomingStream.VideoDisplay.visible = false;
									isDisplayed = true;
								}
								catch(errObject:Error) {
								}
							}
							_incomingStreams.removeItemAt(i);
							break;
						}
					}
					if (incomingStream != null)
					{
						videoDisplayIn.width = 0;
						videoDisplayIn.height = 0;
						videoDisplayIn.visible = false;
						videoDisplayIn.validateNow();
						
						var transform:SoundTransform = new SoundTransform(0, 0);
						transform.volume = 1;
						_publishedStream = new CustomNetStream( _netConnection, _groupSpec );
						_publishedStream.NeighborID = streamID;
						_publishedStream.soundTransform = transform;
						_publishedStream.VideoDisplay = new mx.controls.VideoDisplay();
						_publishedStream.VideoDisplay.visible = true;
						_video = new Video();
						_video.width = DISPLAY_WIDTH;
						_video.height = DISPLAY_HEIGHT;
						_video.attachNetStream(_publishedStream);
						_publishedStream.VideoDisplay.addChild(_video);
						publish_gr.addElement(_publishedStream.VideoDisplay);
						_publishedStream.VideoDisplay.validateNow();
						_publishedStream.play(streamID);
					}
				}
				else
				{
					// if current user is publisched display himself in published window.
					if (!_incomingStream)
					{
						_incomingStream = new CustomNetStream( _netConnection, _groupSpec );
						_incomingStream.NeighborID = streamID;
						videoDisplayIn.attachCamera(_camera);
					}
					videoDisplayIn.width = DISPLAY_WIDTH;
					videoDisplayIn.height = DISPLAY_HEIGHT;
					videoDisplayIn.visible = true;
					videoDisplayIn.validateNow();
					_incomingStream.play(_incomingStream.NeighborID);
				}
				if (isDisplayed && _netGroup.neighborCount < MAX_USER_PER_TALK)
				{
					_displayPeerVideoAndAudio();
				}
				if (incomingStream)
				{
					_incomingStreams.addItem(incomingStream);
				}
			}

			/**
			 *  detach and close stream when user is disconnected.
			 * @ streamID - ID of plaing stream
			 */
			private function _detachPeerVideoAndAudio(streamID:String):void
			{
				if (_incomingStreams != null)
				{
					var incomingStream:CustomNetStream;
					var isDisplayed:Boolean;
					for (var i:int = 0; i < _incomingStreams.length; i++ )
					{
						incomingStream = _incomingStreams.getItemAt(i) as CustomNetStream;
						if (incomingStream  != null && incomingStream.NeighborID == streamID)
						{
							try
							{
								neighbor_gr.removeElement(incomingStream.VideoDisplay);
								isDisplayed = true;
							}
							catch(errObject:Error) {
							}
								
							_incomingStreams.removeItemAt(i);
							incomingStream.close();
							incomingStream = null;
							break;
						}
					}
					if ( isDisplayed && _netGroup.neighborCount > i)
					{
						_displayPeerVideoAndAudio();
					}
				}
			}
			/**
			 * send notification to all Neighbors that  published stream is played.
			 */ 
			private function _sendPublishNotify(): void
			{
				var message:Object = new Object();
				message.sender = _netGroup.convertPeerIDToGroupAddress(_nearID);
				// send time parameter to define properly published stream when two user connected.
				message.time = getTimer(); 
				message.action = "notify";
				_netGroup.sendToAllNeighbors(message);
			}
			
			private function _sendResponse(neighborID:String):void
			{
				var message:Object = new Object();
				message.sender = _netGroup.convertPeerIDToGroupAddress( _nearID );
				message.action = "response";
				message.name = neighborID;
				_netGroup.sendToAllNeighbors(message);
			}
			
			private function _sendRequest(neighborID:String):void
			{
				var message:Object = new Object();
				message.sender = _netGroup.convertPeerIDToGroupAddress( _nearID );
				message.action = "request";
				message.name = neighborID;
				_netGroup.sendToAllNeighbors(message);
			}
			
			
			private function _receiveMessage(message:Object):void
			{
				if (message.action != null && message.sender != null) 
				{
					switch (message.action)
					{
						case "notify" :
						{
							if(_netGroup.neighborCount == 1 && message.time < getTimer())
							{
								_displayPublishVideoAndAudio(_outgoingStream.NeighborID); 	//event.info.name
								_outgoingStream.Published = true;
								_startTime = getTimer();
								_timerPouse.start();
							}
							break;
						}
						case "request" :
						{
							if (_outgoingStream.Published && _responseID == null)
							{
								_responseID = message.name;
							}
							break;
						}
						case "response" :
						{
							if (message.name)
							{
								_displayPublishVideoAndAudio(message.name);
								if( message.name == _netGroup.convertPeerIDToGroupAddress( _nearID ))  
								{
									_outgoingStream.Published = true;
									_responseID = null;
									_startTime = getTimer();
									_timerPouse.start();
								}
								
							}
							break;
						}
					}
				}
			}

			private function _switchPublishStream(): void
			{
				//Alert.show("Переключение микрофона", "Переключение");
				_beep.play();
				_sendResponse(_responseID);
				_outgoingStream.Published = false;
				_displayPublishVideoAndAudio(_responseID);
				_setTimeout(2);
				_responseID = null;
			}
			
			private function _setTimeout(seconds:int):void
			{
				var starttime:int = Math.floor(getTimer()/1000);
				var endtime:int = Math.floor(getTimer()/1000);
				while (endtime<starttime + seconds) {
					endtime = Math.floor(getTimer()/1000);
				}							
			}

		]]>
	</fx:Script>

	<s:BorderContainer cornerRadius="5" backgroundColor="0x909090" borderStyle="solid" width="100%" height="100%" borderColor="#696969">
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" paddingTop="10"/>
	</s:layout>
	<s:VGroup>
		<s:Button label="Настройка видео и аудио устройств" click="onSetupClick(event)" 
				  toolTip="С помощью данной кнопки можно выбрать и настроить видео и аудио устройства для работы с приложением" />
	</s:VGroup>
		<s:HGroup id="group_id" enabled="true" width="100%" height="100%">
		<s:HGroup id="main_gr" horizontalAlign="left">
			<mx:VideoDisplay id="videoDisplayOut" visible="false"/>
		</s:HGroup>
		<s:HGroup id="publish_gr" horizontalAlign="center">
			<mx:VideoDisplay id="videoDisplayIn" width="0" height="0" visible="false"/>
		</s:HGroup>
		<s:HGroup id="neighbor_gr" horizontalAlign="right">
		</s:HGroup>
	</s:HGroup>
	</s:BorderContainer>
</s:Application>
